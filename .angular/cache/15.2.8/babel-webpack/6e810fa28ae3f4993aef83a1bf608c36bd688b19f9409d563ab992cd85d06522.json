{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.cartitemlist = [];\n    this.productlist = new BehaviorSubject([]);\n    this.amount = 0;\n  }\n  getproduct() {\n    return this.http.get(\"https://dummyjson.com/products\");\n  }\n  getproductbyid(id) {\n    return this.http.get(\"https://dummyjson.com/products/\" + id);\n  }\n  addtocart(data) {\n    this.cartitemlist.push(data);\n    this.productlist.next(this.cartitemlist);\n    console.log(this.cartitemlist);\n  }\n  products() {\n    return this.productlist.asObservable();\n  }\n  removecartitem(data) {\n    const indexToRemove = this.cartitemlist.findIndex(a => data.id === a.id);\n    if (indexToRemove !== -1) {\n      this.cartitemlist.splice(indexToRemove, 1);\n      this.productlist.next([...this.cartitemlist]);\n    }\n  }\n  calculateprice() {\n    let total = 0;\n    this.cartitemlist.map(a => {\n      total += a.price;\n    });\n    return total;\n  }\n  removeallitems() {\n    this.cartitemlist = [];\n    this.productlist.next(this.cartitemlist);\n  }\n  sendfinalamount(data) {\n    this.amount = data;\n  }\n  recievefinalamount() {\n    return this.amount;\n  }\n  searchProduct(keyword) {\n    return this.http.get(\"https://dummyjson.com/products/search?q=\" + keyword);\n  }\n  getProductByCategory(category) {\n    return this.getproduct().pipe(map(products => products.filter(product => product.category === category)));\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,UAAU;EAKrBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJjB,iBAAY,GAAQ,EAAE;IACtB,gBAAW,GAAG,IAAIJ,eAAe,CAAM,EAAE,CAAC;IAC1C,WAAM,GAAW,CAAC;EAEe;EAExCK,UAAU;IACR,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAY,gCAAgC,CAAC;EACnE;EAEAC,cAAc,CAACC,EAAU;IACvB,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAC,iCAAiC,GAAGE,EAAE,CAAC;EAC9D;EAEAC,SAAS,CAACC,IAAa;IACrB,IAAI,CAACC,YAAY,CAACC,IAAI,CAACF,IAAI,CAAC;IAC5B,IAAI,CAACG,WAAW,CAACC,IAAI,CAAC,IAAI,CAACH,YAAY,CAAC;IACxCI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,YAAY,CAAC;EAChC;EAEAM,QAAQ;IACN,OAAO,IAAI,CAACJ,WAAW,CAACK,YAAY,EAAE;EACxC;EAEAC,cAAc,CAACT,IAAa;IAC1B,MAAMU,aAAa,GAAG,IAAI,CAACT,YAAY,CAACU,SAAS,CAAEC,CAAU,IAAKZ,IAAI,CAACF,EAAE,KAAKc,CAAC,CAACd,EAAE,CAAC;IAEnF,IAAIY,aAAa,KAAK,CAAC,CAAC,EAAE;MACxB,IAAI,CAACT,YAAY,CAACY,MAAM,CAACH,aAAa,EAAE,CAAC,CAAC;MAC1C,IAAI,CAACP,WAAW,CAACC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACH,YAAY,CAAC,CAAC;;EAEjD;EAEAa,cAAc;IACZ,IAAIC,KAAK,GAAG,CAAC;IACb,IAAI,CAACd,YAAY,CAACV,GAAG,CAAEqB,CAAM,IAAI;MAC/BG,KAAK,IAAIH,CAAC,CAACI,KAAK;IAClB,CAAC,CAAC;IACF,OAAOD,KAAK;EACd;EAEAE,cAAc;IACZ,IAAI,CAAChB,YAAY,GAAG,EAAE;IACtB,IAAI,CAACE,WAAW,CAACC,IAAI,CAAC,IAAI,CAACH,YAAY,CAAC;EAC1C;EAEAiB,eAAe,CAAClB,IAAY;IAC1B,IAAI,CAACmB,MAAM,GAAGnB,IAAI;EACpB;EAEAoB,kBAAkB;IAChB,OAAO,IAAI,CAACD,MAAM;EACpB;EAEAE,aAAa,CAACC,OAAe;IAC3B,OAAO,IAAI,CAAC5B,IAAI,CAACE,GAAG,CAAa,0CAA0C,GAAG0B,OAAO,CAAC;EACxF;EAEAC,oBAAoB,CAACC,QAAgB;IACnC,OAAO,IAAI,CAAC7B,UAAU,EAAE,CAAC8B,IAAI,CAC3BlC,GAAG,CAACgB,QAAQ,IAAIA,QAAQ,CAACmB,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACH,QAAQ,KAAKA,QAAQ,CAAC,CAAC,CAC3E;EACH;;AA/DWhC,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAoC,SAAVpC,UAAU;EAAAqC,YAFT;AAAM","names":["BehaviorSubject","map","ApiService","constructor","http","getproduct","get","getproductbyid","id","addtocart","data","cartitemlist","push","productlist","next","console","log","products","asObservable","removecartitem","indexToRemove","findIndex","a","splice","calculateprice","total","price","removeallitems","sendfinalamount","amount","recievefinalamount","searchProduct","keyword","getProductByCategory","category","pipe","filter","product","factory","providedIn"],"sourceRoot":"","sources":["G:\\Sarohi sprint 1\\Angular Application\\Angular-Ecommerce-main\\src\\app\\Services\\api.service.ts"],"sourcesContent":["// api.service.ts\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Product } from '../component/product-view/productmodal'; // Adjust the import based on your file structure\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  public cartitemlist: any = [];\r\n  public productlist = new BehaviorSubject<any>([]);\r\n  public amount: number = 0;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getproduct(): Observable<Product[]> {\r\n    return this.http.get<Product[]>(\"https://dummyjson.com/products\");\r\n  }\r\n\r\n  getproductbyid(id: string): Observable<any> {\r\n    return this.http.get(\"https://dummyjson.com/products/\" + id);\r\n  }\r\n\r\n  addtocart(data: Product): void {\r\n    this.cartitemlist.push(data);\r\n    this.productlist.next(this.cartitemlist);\r\n    console.log(this.cartitemlist);\r\n  }\r\n\r\n  products(): Observable<any> {\r\n    return this.productlist.asObservable();\r\n  }\r\n\r\n  removecartitem(data: Product): void {\r\n    const indexToRemove = this.cartitemlist.findIndex((a: Product) => data.id === a.id);\r\n\r\n    if (indexToRemove !== -1) {\r\n      this.cartitemlist.splice(indexToRemove, 1);\r\n      this.productlist.next([...this.cartitemlist]);\r\n    }\r\n  }\r\n\r\n  calculateprice(): number {\r\n    let total = 0;\r\n    this.cartitemlist.map((a: any) => {\r\n      total += a.price;\r\n    });\r\n    return total;\r\n  }\r\n\r\n  removeallitems(): void {\r\n    this.cartitemlist = [];\r\n    this.productlist.next(this.cartitemlist);\r\n  }\r\n\r\n  sendfinalamount(data: number): void {\r\n    this.amount = data;\r\n  }\r\n\r\n  recievefinalamount(): number {\r\n    return this.amount;\r\n  }\r\n\r\n  searchProduct(keyword: string): Observable<Product[]> {\r\n    return this.http.get<Product[]> (\"https://dummyjson.com/products/search?q=\" + keyword);\r\n  }\r\n\r\n  getProductByCategory(category: string): Observable<Product[]> {\r\n    return this.getproduct().pipe(\r\n      map(products => products.filter(product => product.category === category))\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}